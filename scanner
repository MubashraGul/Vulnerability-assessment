import nmap
import socket
from urllib.parse import urlparse
from shared import target_url

def resolve_url(url):
    try:
        parsed_url = urlparse(url)
        if parsed_url.hostname is None:
            raise ValueError("Invalid URL format")
        ip_address = socket.gethostbyname(parsed_url.hostname)
        return ip_address
    except (socket.gaierror, ValueError) as e:
        raise ValueError(f"Error resolving URL: {e}")

def perform_aggressive_scan(target):
    nm = nmap.PortScanner()
    scan_result = nm.scan(target, arguments='-A')
    return scan_result

def perform_vulnerability_scan(target):
    nm = nmap.PortScanner()
    scan_result = nm.scan(target, arguments='--script vuln')
    return scan_result

def parse_vulnerability_scan_results(scan_result):
    result = []
    for host in scan_result['scan']:
        result.append(f"Host: {host}")
        result.append(f"Hostname: {scan_result['scan'][host]['hostnames']}")
        result.append(f"State: {scan_result['scan'][host]['status']['state']}")

        for protocol in scan_result['scan'][host].all_protocols():
            result.append(f"Protocol: {protocol}")
            ports = scan_result['scan'][host][protocol].keys()
            for port in ports:
                result.append(f"Port: {port}")
                result.append(f"State: {scan_result['scan'][host][protocol][port]['state']}")
                result.append(f"Service: {scan_result['scan'][host][protocol][port]['name']}")
                if 'script' in scan_result['scan'][host][protocol][port]:
                    for script, output in scan_result['scan'][host][protocol][port]['script'].items():
                        result.append(f"Script: {script}")
                        result.append(f"Output: {output}")
    return '\n'.join(result)

# Example usage
target = target_url
try:
    ip_address = resolve_url(target)
    scan_result = perform_vulnerability_scan(ip_address)
    parsed_results = parse_vulnerability_scan_results(scan_result)
    print(parsed_results)
except ValueError as e:
    print(e)
