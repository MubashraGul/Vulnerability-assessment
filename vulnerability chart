import tkinter as tk
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from shared import target_url
from tester import perform_vulnerability_scan, parse_vulnerability_scan_results

def update_vulnerability_chart(frame, scan_results):
    # Clear previous chart if any
    for widget in frame.winfo_children():
        widget.destroy()

    # Create a figure for the chart
    fig = Figure(figsize=(6, 4), dpi=100)
    ax = fig.add_subplot(111)

    # Initialize dictionary to store counts
    severity_counts = {"High": 0, "Medium": 0, "Low": 0}
    cve_count = 0

    # Parse scan results
    for scan, result in scan_results.items():
        if isinstance(result, str):
            # Update severity counts
            for severity in severity_counts.keys():
                severity_counts[severity] += result.lower().count(severity.lower())

            # Count CVE occurrences
            cve_count += result.lower().count("cve")

    # Plot severity counts
    labels = list(severity_counts.keys())
    values = list(severity_counts.values())
    ax.bar(labels, values, color=['red', 'orange', 'green'])
    ax.set_title('Vulnerability Scan Results')
    ax.set_xlabel('Severity')
    ax.set_ylabel('Count')

    # Add CVE count to the plot
    ax.text(0.5, 0.9, f"Total CVEs: {cve_count}", transform=ax.transAxes,
            fontsize=12, verticalalignment='top', horizontalalignment='center')

    # Display the chart in the frame
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

def perform_scan_and_display_chart():
    # Perform vulnerability scan
    target = "http://scanme.nmap.org/"
    try:
        scan_results = perform_vulnerability_scan(target)
    except ValueError as e:
        print("Error:", e)
        return

    # Parse scan results and update the chart
    parsed_results = parse_vulnerability_scan_results(scan_results)
    update_vulnerability_chart(chart_frame, {"Vulnerability Scan": parsed_results})

# Create a new tkinter application
root = tk.Tk()
root.title("Vulnerability Scan Results")

# Create a frame for the chart
chart_frame = tk.Frame(root)
chart_frame.pack(fill=tk.BOTH, expand=True)

# Perform the vulnerability scan and display the chart
perform_scan_and_display_chart()

# Button to trigger another scan and update the chart
scan_button = tk.Button(root, text="Perform Scan", command=perform_scan_and_display_chart)
scan_button.pack()

# Run the tkinter event loop
root.mainloop()
