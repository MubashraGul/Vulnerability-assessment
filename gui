import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, END
from concurrent.futures import ThreadPoolExecutor
from tester import resolve_url, perform_aggressive_scan, perform_vulnerability_scan, parse_vulnerability_scan_results
from SQL import test_sql_injection
from Dump import integrate_dns_dumper
from Scraper import spider
from shared import load_payloads

# Define the file path for the payloads
PAYLOAD_FILE_PATH = r'C:\Users\Mubas\Desktop\Payload File.txt'

# Initialize target_url
target_url = ""  # Replace with the actual target URL


class VulnerabilityScannerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Vulnerability Scanner")

        # Set up the notebook (tabbed interface)
        self.notebook = ttk.Notebook(root)
        self.notebook.grid(row=0, column=0, padx=10, pady=10, sticky='nsew')

        self.scan_tab = ttk.Frame(self.notebook)
        self.vuln_scan_tab = ttk.Frame(self.notebook)
        self.sql_injection_tab = ttk.Frame(self.notebook)
        self.dnsdumper_tab = ttk.Frame(self.notebook)
        self.spider_tab = ttk.Frame(self.notebook)
        self.chart_tab = ttk.Frame(self.notebook)

        self.notebook.add(self.scan_tab, text="Scan")
        self.notebook.add(self.vuln_scan_tab, text="Vulnerability Scan Results")
        self.notebook.add(self.sql_injection_tab, text="SQL Injection Test Results")
        self.notebook.add(self.dnsdumper_tab, text="DNS Dumper Results")
        self.notebook.add(self.spider_tab, text="Spider Results")

        # Set up the Scan tab
        ttk.Label(self.scan_tab, text="Enter the target URL:").grid(row=0, column=0, padx=10, pady=10)
        self.url_entry = ttk.Entry(self.scan_tab, width=50)
        self.url_entry.grid(row=0, column=1, padx=10, pady=10)

        self.scan_button = ttk.Button(self.scan_tab, text="Start Scan", command=self.start_scan)
        self.scan_button.grid(row=0, column=2, padx=10, pady=10)

        # Set up the Results tabs
        self.vuln_result_text = scrolledtext.ScrolledText(self.vuln_scan_tab, width=100, height=20)
        self.vuln_result_text.grid(row=0, column=0, padx=10, pady=10)

        self.sql_injection_result_text = scrolledtext.ScrolledText(self.sql_injection_tab, width=100, height=20)
        self.sql_injection_result_text.grid(row=0, column=0, padx=10, pady=10)

        self.dnsdumper_result_text = scrolledtext.ScrolledText(self.dnsdumper_tab, width=100, height=20)
        self.dnsdumper_result_text.grid(row=0, column=0, padx=10, pady=10)

        self.spider_result_text = scrolledtext.ScrolledText(self.spider_tab, width=100, height=20)
        self.spider_result_text.grid(row=0, column=0, padx=10, pady=10)

        self.chart_frame = ttk.Frame(self.chart_tab)
        self.chart_frame.grid(row=0, column=0, padx=10, pady=10)

        # Load the payloads from the specified file
        self.payloads = load_payloads(PAYLOAD_FILE_PATH)

    def start_scan(self):
        target_url = self.url_entry.get().strip()
        if not target_url:
            messagebox.showerror("Error", "Please enter a valid URL.")
            return

        try:
            ip_address = resolve_url(target_url)
            if ip_address:
                with ThreadPoolExecutor(max_workers=5) as executor:
                    scan_tasks = [
                        (perform_aggressive_scan, [ip_address], self.vuln_result_text),
                        (perform_vulnerability_scan, [ip_address], self.vuln_result_text),
                        (test_sql_injection, [target_url, self.payloads, self.sql_injection_result_text], self.sql_injection_result_text),
                        (integrate_dns_dumper, [self.dnsdumper_result_text], self.dnsdumper_result_text),  # Fixed task definition
                        (spider, [target_url, 10], self.spider_result_text)
                    ]
                    for task in scan_tasks:
                        executor.submit(self.execute_task, *task)
        except ValueError as e:
            messagebox.showerror("Error", str(e))

    def execute_task(self, func, args, result_widget):
        try:
            result = func(*args)  # Call function with arguments
            if isinstance(result, dict):  # Ensure the result is converted to string
                result = parse_vulnerability_scan_results(result)
            # Print the result to the terminal
            print(result)
            # Insert the result into the respective text widget in the GUI
            result_widget.insert(END, result + "\n")
        except Exception as e:
            # Print any errors to the terminal
            print(f"Error: {e}")
            # Insert error message into the respective text widget in the GUI
            result_widget.insert(END, f"Error: {e}\n")


if __name__ == "__main__":
    root = tk.Tk()
    app = VulnerabilityScannerApp(root)
    root.mainloop()
